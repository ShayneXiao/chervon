#spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.url=jdbc:postgresql://ec2-23-23-234-118.compute-1.amazonaws.com/d2qr30imhegokq?ssl=true&sslfactory=org.postgresql.ssl.NonValidatingFactory
#\u9A71\u52A8\u540D
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.username=qfxssgdttansik
spring.datasource.password=b10a24bbe05d48125881f9e6268ec769db1c63ab5103a25dbbb6c5cfb607da32
#\u6570\u636E\u5E93\u65B9\u8A00\u7C7B\u578B
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
#\u672C\u5730\u6570\u636E\u5E93
#spring.datasource.url = jdbc:postgresql://localhost:5432/postgres
#spring.datasource.username = postgres
#spring.datasource.password = heqinsi123

#mybatis\u914D\u7F6E\u6587\u4EF6
mybatis.mapper-locations=classpath:mybatisMapper/*.xml

#\u8FDE\u63A5\u6C60\u7684\u914D\u7F6E\u4FE1\u606F#
#\u8FDE\u63A5\u6C60\u4E2D\u521B\u5EFA\u7684\u8FDE\u63A5\u9ED8\u8BA4\u662F\u5426\u81EA\u52A8\u63D0\u4EA4\u4E8B\u52A1
spring.datasource.tomcat.default-auto-commit=true
#\u8FDE\u63A5\u6C60\u542F\u52A8\u65F6\u521B\u5EFA\u7684\u521D\u59CB\u8FDE\u63A5\u6570\u91CF\uFF08\u9ED8\u8BA410\uFF09
spring.datasource.tomcat.initial-size=3
#\u8FDE\u63A5\u6C60\u540C\u4E00\u65F6\u95F4\u53EF\u5206\u914D\u7684\u6700\u5927\u6D3B\u8DC3\u8FDE\u63A5\u6570\uFF08\u9ED8\u8BA4100\uFF09
spring.datasource.tomcat.max-active=120
#\u6700\u5927\u7B49\u5F85\u65F6\u95F4\uFF08\u6BEB\u79D2\uFF09 \uFF0C \u5982\u679C\u5728\u6CA1\u6709\u8FDE\u63A5\u53EF\u7528\u7684\u60C5\u51B5\u4E0B\u7B49\u5F85\u8D85\u8FC7\u6B64\u65F6\u95F4 \uFF0C \u5219\u629B\u51FA\u5F02\u5E38\uFF08\u9ED8\u8BA430000\uFF09
spring.datasource.tomcat.max-wait=10000
#\u5F53\u4ECE\u8FDE\u63A5\u6C60\u4E2D\u53D6\u51FA\u4E00\u4E2A\u8FDE\u63A5\u65F6\u662F\u5426\u8FDB\u884C\u9A8C\u8BC1 \uFF0C \u82E5\u9A8C\u8BC1\u5931\u8D25\u5219\u4ECE\u6C60\u4E2D\u5220\u9664\u8BE5\u8FDE\u63A5\u5E76\u5C1D\u8BD5\u53D6\u51FA\u53E6\u4E00\u4E2A\u8FDE\u63A5\uFF08\u9ED8\u8BA4false\uFF09
spring.datasource.tomcat.test-on-borrow=true
#\u5BF9\u6C60\u4E2D\u7A7A\u95F2\u7684\u8FDE\u63A5\u662F\u5426\u8FDB\u884C\u9A8C\u8BC1 \uFF0C \u9A8C\u8BC1\u5931\u8D25\u5219\u56DE\u6536\u6B64\u8FDE\u63A5
spring.datasource.tomcat.test-while-idle=true
#\u5728\u8FDE\u63A5\u6C60\u8FD4\u56DE\u8FDE\u63A5\u7ED9\u8C03\u7528\u8005\u524D\u7528\u6765\u5BF9\u8FDE\u63A5\u8FDB\u884C\u9A8C\u8BC1\u7684\u67E5\u8BE2 SQL \u9ED8\u8BA4\uFF08null\uFF09
spring.datasource.tomcat.validation-query=SELECT 1
#SQL \u67E5\u8BE2\u9A8C\u8BC1\u8D85\u65F6\u65F6\u95F4\uFF08\u79D2\uFF09 \uFF0C \u5C0F\u4E8E\u6216\u7B49\u4E8E 0 \u7684\u6570\u503C\u8868\u793A\u7981\u7528\uFF0C\u5C0F\u4E8E\u7B49\u4E8E0\u9ED8\u8BA4\u7981\u7528
spring.datasource.tomcat.validation-query-timeout=3
#\u7A7A\u95F2\u8FDE\u63A5\u56DE\u6536\u5668\u7EBF\u7A0B\u8FD0\u884C\u671F\u95F4\u4F11\u7720\u65F6\u95F4\uFF08\u6BEB\u79D2\uFF09 \uFF0C \u8BE5\u503C\u4E0D\u5E94\u8BE5\u5C0F\u4E8E 1 \u79D2 \uFF0C \u5B83\u51B3\u5B9A\u7EBF\u7A0B\u591A\u4E45\u9A8C\u8BC1\u7A7A\u95F2\u8FDE\u63A5\u6216\u4E22\u5F03\u8FDE\u63A5\u7684\u9891\u7387\uFF08\u9ED8\u8BA45000\uFF09
spring.datasource.tomcat.time-between-eviction-runs-millis=10000
#\u8FDE\u63A5\u5728\u6C60\u4E2D\u4FDD\u6301\u7A7A\u95F2\u800C\u4E0D\u88AB\u56DE\u6536\u7684\u6700\u5C0F\u65F6\u95F4\uFF08\u6BEB\u79D2\uFF09
spring.datasource.tomcat.min-evictable-idle-time-millis=120000
#\u6807\u8BB0\u662F\u5426\u5220\u9664\u6CC4\u9732\u7684\u8FDE\u63A5 \uFF0C \u5982\u679C\u8FDE\u63A5\u8D85\u51FA removeAbandonedTimeout \u7684\u9650\u5236 \uFF0C \u4E14\u8BE5\u5C5E\u6027\u8BBE\u7F6E\u4E3A true \uFF0C \u5219\u8FDE\u63A5\u88AB\u8BA4\u4E3A\u662F\u88AB\u6CC4\u9732\u5E76\u4E14\u53EF\u4EE5\u88AB\u5220\u9664
spring.datasource.tomcat.remove-abandoned=true
#\u6CC4\u9732\u7684\u8FDE\u63A5\u53EF\u4EE5\u88AB\u5220\u9664\u7684\u8D85\u65F6\u65F6\u95F4\uFF08\u79D2\uFF09 \uFF0C \u8BE5\u503C\u5E94\u8BBE\u7F6E\u4E3A\u5E94\u7528\u7A0B\u5E8F\u67E5\u8BE2\u53EF\u80FD\u6267\u884C\u7684\u6700\u957F\u65F6\u95F4\uFF08\u9ED8\u8BA460\uFF09
spring.datasource.tomcat.remove-abandoned-timeout=120

server.port=8099
server.context-path=

spring.jackson.serialization.INDENT_OUTPUT=true

jwt.header=Authorization
jwt.secret=mySecret
jwt.expiration=604800 
jwt.expirationhours=3600
#//604800   7 \u5929
jwt.route.authentication.path=auth
jwt.route.authentication.refresh=refresh

ocr.base.url=https://api.ocrestful.com/ubu30/res/

email.url=http://chervoniotdemo.herokuapp.com/api/v1/resets/
#https://private-c0530-iyo.apiary-mock.com/api/v1/

sfdc.url=https://pa-ego.cs25.force.com/services/apexrest/UserEndpoints

app_key=IoTHerokuToSF


#relation_BaseLink=https://private-b1af72-egoapi.apiary-mock.com/api/v1/
relation_BaseLink=https://chervoniotdemo.herokuapp.com/api/v1/

#able cloud api \u76F8\u5173\u914D\u7F6E
ablecloud.developerId=482
ablecloud.url=http://test.ablecloud.cn:5000/chervonService/v1/
ablecloud.accessKey=ce28dbd04048029e80c6f1975765cc80
ablecloud.timeout=31536000
ableCloud.secretKey=4b30af824096f78480cb92546b8b7e1b
ableCloud.subDomain=chervon


#redis
spring.redis.database=0
# server host1
#spring.redis.host=localhost
spring.redis.host=127.0.0.1

# server password
spring.redis.password=p6b1cc949adf32294cfafa9e200d684674e03cd00f761b4aa4364344c37dfa3dd
spring.redis.url=redis://h:p6b1cc949adf32294cfafa9e200d684674e03cd00f761b4aa4364344c37dfa3dd@ec2-34-231-155-48.compute-1.amazonaws.com:11809
#connection port
spring.redis.port=11809
# pool settings ...
spring.redis.pool.max-idle=8
spring.redis.pool.min-idle=0
spring.redis.pool.max-active=8
spring.redis.pool.max-wait=-1

# java mail
fromEmailAccount = egoheroku.v1.@gmail.com
fromEmailPassword = heqinsi123
fromEmailSMTPHost = smtp.gmail.com
mail.transport.protocol = smtp
mail.smtp.auth = true
mail.smtp.starttls.enable = true